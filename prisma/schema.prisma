generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // This will come from your Supabase project settings
  directUrl = env("DIRECT_URL")   // Also from Supabase, for migrations
}


// Enum for Mission Status
enum MissionStatus {
  OPEN        // Mission is open and accepting participants/contributions
  IN_PROGRESS // Mission is actively being worked on
  COMPLETED   // Mission has been successfully completed
  ARCHIVED    // Mission is no longer active but kept for records
}

// User Model
model User {
  id        String   @id // This should be the UUID from supabase.auth.users.id
  email     String  @unique
  username  String?  @unique 
  emoji     String?  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  ownedMissions Mission[] @relation("MissionOwner") 
  joinedMissions MissionParticipant[]
  createdTasks MissionTask[] @relation("TaskCreator")
  comments MissionComment[]
  resources MissionResource[]
}

// Mission Model
model Mission {
  id          String        @id @default(uuid()) // Auto-generated UUID for each mission
  title       String
  description String        @db.Text // Use Text for potentially long descriptions
  emoji       String?       // The emoji representing the mission
  status      MissionStatus @default(OPEN)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  ownerId     String                         // Foreign key
  owner       User    @relation("MissionOwner", fields: [ownerId], references: [id])

  tags        String[] @default([]) 
  participants MissionParticipant[]
  tasks       MissionTask[]
  comments MissionComment[]
  resources MissionResource[]

  @@index([ownerId]) 
}

model MissionParticipant {
  id        String   @id @default(uuid())
  missionId String
  userId    String
  joinedAt  DateTime @default(now())

  mission Mission @relation(fields: [missionId], references: [id], onDelete: Cascade) // Added onDelete
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Added onDelete

  @@unique([missionId, userId]) // A user can join a specific mission only once
  @@index([missionId])
  @@index([userId])
}

model MissionTask {
  id            String   @id @default(uuid())
  text          String   @db.Text // Allow for longer task descriptions
  emoji         String?  // Optional emoji for the task
  isCompleted   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  missionId     String
  mission       Mission  @relation(fields: [missionId], references: [id], onDelete: Cascade)

  creatorId     String   // ID of the user who created the task
  creator       User     @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade) // Or Restrict/SetNull depending on desired behavior

  @@index([missionId])
  @@index([creatorId])
}


model MissionComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  missionId String
  mission   Mission  @relation(fields: [missionId], references: [id], onDelete: Cascade)

  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([missionId])
  @@index([userId])
}

model MissionResource {
  id          String   @id @default(cuid())
  title       String
  url         String   @db.Text // URLs can be long
  description String?  @db.Text
  emoji       String?  // Optional emoji for the resource
  createdAt   DateTime @default(now())

  missionId String
  mission   Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  userId String // User who added the resource
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Or SetNull

  @@index([missionId])
  @@index([userId])
}
